
# The elements of the UI such as rectanges, text, and images were generated by the Tkinter Designer created by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from PIL import Image, ImageTk

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\User\Desktop\Vision Sensor System\UI\frame") #Insert Path to Image Frames

#Original Design Dimensions
DEFAULT_WIDTH = 1920
DEFAULT_HEIGHT = 1080

#Create a Tkinter Window
window = Tk()

#Get User's Screen Size
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()

#Scale Factor Calculation
w_scale_factor = screen_width / DEFAULT_WIDTH
h_scale_factor = screen_height / DEFAULT_HEIGHT
#Scales Based on Smallest Sidelength
scale_factor = min(w_scale_factor, h_scale_factor)

#Canvas Size Calculation
canvas_width = int(scale_factor * DEFAULT_WIDTH)
canvas_height = int(scale_factor * DEFAULT_HEIGHT)

#Creates UI Canvas and Size
window.geometry(f"{canvas_width}x{canvas_height}")
window.configure(bg = "#1F1C25")

canvas = Canvas(
    window,
    bg = "#1F1C25",
    height = canvas_height,
    width = canvas_width,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)
canvas.pack() #new


def relative_to_assets(path: str) -> Path:
    return str(Path(ASSETS_PATH / Path(path)).absolute())

def scale_value(value: float) -> float:
    return value * scale_factor

#Title Banner
canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    scale_value(0.0),
    scale_value(15.24444580078125),
    scale_value(1920.0),
    scale_value(127.24444580078125),
    fill="#383442",
    outline="")

canvas.create_text(
    scale_value(454.0),
    scale_value(44.24444580078125),
    anchor="nw",
    text="Hyperloop Pod Vision Sensor System Panel",
    fill="#FFFFFF",
    font=("Alata Regular", 48 * -1)
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    scale_value(111.0),
    scale_value(71.24444580078125),
    image=image_image_1
)

#Resizing Image Setup
image_files = ["image_1.png", "image_2.png", "image_3.png", "image_4.png", "image_5.png", "image_6.png", "image_7.png", "image_8.png", "image_9.png", "image_10.png", "image_11.png"]
images = []
for file in image_files:
    resized_image = Image.open(relative_to_assets(file))
    resized_image = resized_image.resize((int(resized_image.width * scale_factor), int(resized_image.height * scale_factor)))
    images.append(ImageTk.PhotoImage(resized_image))

#Creates Images for Live Video Feed Panel
canvas.create_image(scale_value(670.0), scale_value(172.24444580078125), image = images[1])
canvas.create_image(scale_value(670.0), scale_value(924.2444458007812), image = images[2])
canvas.create_image(scale_value(55.497314453125), scale_value(172.599609375), image = images[5])

#Creates Rectangle for Live Video Feed Panel
canvas.create_rectangle(
    scale_value(30.0),
    scale_value(198.24444580078125), 
    scale_value(1310.0), 
    scale_value(918.2444458007812), 
    fill="#383443", 
    outline="")

#Live Video Feed Panel Text
canvas.create_text(
    scale_value(82), 
    scale_value(160), 
    anchor="nw", 
    text="Live Video Feed", 
    fill="#FFFFFF", 
    font=("Commissioner Bold", int(25 * -1 * scale_factor)))

#Creates Images for Object Detection Panel
canvas.create_image(scale_value(1615.0), scale_value(172.24444580078125), image = images[3])
canvas.create_image(scale_value(1615.0), scale_value(924.2444458007812), image = images[4])

#Create Rectangles for Object Detection Panel
canvas.create_rectangle(
    scale_value(1341.0),
    scale_value(198.24444580078125),
    scale_value(1890.0),
    scale_value(918.2444458007812),
    fill="#383442",
    outline="")

canvas.create_rectangle(
    scale_value(1881.0),
    scale_value(207.24444580078125),
    scale_value(1888.0),
    scale_value(913.2444458007812),
    fill="#2D2936",
    outline="")

#Object Detection Panel Text
canvas.create_text(
    scale_value(1362.0),
    scale_value(160.0),
    anchor="nw",
    text="Objects Detected",
    fill="#FFFFFF",
    font=("Commissioner Bold", int(25 * -1 * scale_factor)))

#Create Status Message Box
#Status Message Box(1018)
canvas.create_image(scale_value(959), scale_value(992.4703979492188), image = images[6])

#Create Warning Status Message Images
warning_1 = canvas.create_image(scale_value(363), scale_value(986),image = images[7]) 
warning_2 = canvas.create_image(scale_value(1553), scale_value(986), image = images[8])

#Create Alert Status Message Image
alert_1 = canvas.create_image(scale_value(363), scale_value(986), image = images[9])
alert_2 = canvas.create_image(scale_value(1553), scale_value(986), image = images[10])

#Status Message Text
status_text = canvas.create_text(
    scale_value(511),
    scale_value(960),
    anchor="nw",
    text="Status: On Track Towards Destination",
    fill="#FFFFFF",
    font=("Commissioner Bold", int(51 * -1 * scale_factor)))

object_alert_message = canvas.create_text(
    scale_value(412),
    scale_value(960),
    anchor="nw",
    text="CAUTION: OBJECT DETECTED ON TRACK ",
    fill="#FFD42A",
    font=("Commissioner Bold", int(54 * -1 * scale_factor)))

pod_warning_message = canvas.create_text(
    scale_value(411),
    scale_value(960),
    anchor="nw",
    text="WARNING: POD DEVIATING FROM TRACK",
    fill="#ED1C24",
    font=("Commissioner Bold", int(54 * -1 * scale_factor)))

object_warning_message = canvas.create_text(
    scale_value(419),
    scale_value(960),
    anchor="nw",
    text="WARNING: OBJECT OBSTRUCTING PATH",
    fill="#ED1C24",
    font=("Commissioner Bold", int(54 * -1 * scale_factor)))

#Temporary Status Message Toggle Function
def toggle_text(text_item, show):
    state = "normal" if show else "hidden"
    canvas.itemconfigure(text_item, state=state)

#Toggle Warning Texts
#Set to "True" to display text and "False" to hide text
toggle_text(status_text, False)
toggle_text(object_alert_message, True) 
toggle_text(pod_warning_message, False) 
toggle_text(object_warning_message, False) 

#Toggle Warning Images
#Set to "normal" to display image and "hidden" to hide image
canvas.itemconfig(alert_1, state = "normal")
canvas.itemconfig(alert_2, state = "normal")
canvas.itemconfig(warning_1, state = "hidden")
canvas.itemconfig(warning_2, state = "hidden")

window.resizable(True, True)
window.mainloop()
